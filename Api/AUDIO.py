from enum import IntEnum
from .Api import BaseCommand
from .Commands import Commands
from ctypes import c_uint8, c_uint16, c_uint32, Structure
from enum import IntEnum
from Api.Api import RsStatusType


class ApiPcmFscFreqType(IntEnum):
    """
    AI BULLSHIT WARNING!
    The below comment was hallucinated by a brainless machine, do NOT trust it.
    Please remove this Warning upon review / verification of correctness.

    Enumeration of PCM Frame Sync (FSC) frequencies.
    Defines supported frequencies for PCM synchronization.
    """
    AP_FSC_FREQ_8KHZ = 0x00  # PCM FSC frequency is 8 KHz.
    AP_FSC_FREQ_16KHZ = 0x01  # PCM FSC frequency is 16 KHz.
    AP_FSC_FREQ_32KHZ = 0x02  # PCM FSC frequency is 32 KHz.
    AP_FSC_FREQ_INVALID = 0xFF  # [0x03; 0xFF] is invalid.


class ApiPcmFscLengthType(IntEnum):
    """
    Enumeration of PCM Frame Sync (FSC) pulse lengths.
    Defines different FSC pulse lengths for master and slave modes.
    """
    # The length of PCM FSC pulse is equal to 1 data bit. (Master)
    AP_FSC_LENGTH_1 = 0x00
    # The length of PCM FSC pulse is equal to 8 data bits. (Master)
    AP_FSC_LENGTH_8 = 0x01
    # The length of PCM FSC pulse is equal to 16 data bits. (Master)
    AP_FSC_LENGTH_16 = 0x02
    # The length of PCM FSC pulse is equal to 32 data bits. (Master)
    AP_FSC_LENGTH_32 = 0x03
    # The length of PCM FSC pulse is equal to 48 data bits. (Master)
    AP_FSC_LENGTH_48 = 0x04
    # Ch 0-5 shifted in after FSC edge. (Slave)
    AP_FSC_LENGTH_NORMAL = 0x05
    # Ch 0-2 shifted in after FSC edge, Ch 3-5 shifted after opposite FSC edge. (Slave)
    AP_FSC_LENGTH_SPLIT = 0x06


class ApiPcmClkType(IntEnum):
    """
    Enumeration of PCM clock frequencies.
    Defines supported clock frequencies for PCM interface.
    """
    AP_PCM_CLK_1152 = 0x00  # 1.152 MHz
    AP_PCM_CLK_2304 = 0x01  # 2.304 MHz
    AP_PCM_CLK_4608 = 0x02  # 4.608 MHz
    AP_PCM_CLK_1536 = 0x03  # 1.536 MHz


class ApiPpAudioInitPcmReq(BaseCommand):
    """
    Command to initialize PCM audio interface.
    Configures PCM parameters including master/slave mode, clock settings, and timing.
    """

    _fields_ = [
        # Controls whether the device is master or slave on the PCM interface.
        ("PcmEnable", c_uint8),
        ("IsMaster", c_uint8),
        ("Reserved", c_uint8),  # For further use. Must be set to 0.
        ("PcmFscFreq", c_uint8),  # PCM FSC frequency; 8,16, or 32kHz.
        # The length of the FSC pulse. 1, 8, 16, 32 or 48 bits. Or special slave mode setting, see type description.
        ("PcmFscLength", c_uint8),
        # If true FSC starts at the same time as MSB bit of PCM channel 0 data, otherwise it starts 1 clocks cycle before data.
        ("PcmFscStartAligned", c_uint8),
        # The clock frequency generated by the module if the module is master on the PCM interface. Ignored if the device is slave.
        ("PcmClk", c_uint8),
        # Controls whether PCM data is clocked out on rising or falling edge of the PCM_CLK.
        ("PcmClkOnRising", c_uint8),
        # Number of bit clocks per data bit. See datasheet for options.
        ("PcmClksPerBit", c_uint8),
        # If true, FSC is inverted.
        ("PcmFscInvert", c_uint8),
        # 5 bit delay value in number of 8 bits. Delay of data bits in number of channels.
        ("PcmCh0Delay", c_uint8),
        # Controls whether PCM_DOUT is push-pull (0) or open drain (1). Sets DSP_PCM_CTRL_REG.PCM_PPOD to the value specified by PcmDoOd. Can be used if the I/O levels (VDDIO) on the PCM interface is 1.8V. Must be set to 1 if multiple devices are connected to the PCM bus. DSP_PCM_CTRL_REG.PCM_PPOD is set to 0 after reset.
        ("PcmDoutIsOpenDrain", c_uint8),
        # Controls the PCM_DI, PCM_DO, PCM_CLK, and PCM_FSC I/O mode. 0: Normal mode. 1: Forced to open drain if output and pull-up resistor is always disabled if input (back-drive protection). Sets PAD_CTRL_REG.P225_OD and PAD_CTRL_REG.P234_OD to the value specified by PcmOd. Must be set to 1 if the I/O levels (VDDIO) on the PCM interface is > 1.8V. VDDIO up to 3.45V is supported if set to 1. PAD_CTRL_REG.P225_OD and PAD_CTRL_REG.P234_OD are set to 0 after reset. Please note that PAD_CTRL_REG.P234_OD = 1 overrules DSP_PCM_CTRL_REG.PCM_PPOD.
        ("PcmIsOpenDrain", c_uint8),
    ]

    def __init__(
        self,
        PcmEnable,
        IsMaster,
        Reserved,
        PcmFscFreq: ApiPcmFscFreqType,
        PcmFscLength: ApiPcmFscLengthType,
        PcmFscStartAligned,
        PcmClk: ApiPcmClkType,
        PcmClkOnRising,
        PcmClksPerBit,
        PcmFscInvert,
        PcmCh0Delay,
        PcmDoutIsOpenDrain,
        PcmIsOpenDrain,
    ):
        """
        Initialize PCM audio interface configuration.

        Args:
            PcmEnable: Enable/disable PCM interface
            IsMaster: Set device as master (1) or slave (0)
            Reserved: Reserved field, must be 0
            PcmFscFreq (ApiPcmFscFreqType): Frame sync frequency
            PcmFscLength (ApiPcmFscLengthType): Frame sync pulse length
            PcmFscStartAligned: Frame sync alignment with data
            PcmClk (ApiPcmClkType): PCM clock frequency
            PcmClkOnRising: Clock edge selection for data
            PcmClksPerBit: Clock cycles per data bit
            PcmFscInvert: Invert frame sync signal
            PcmCh0Delay: Channel 0 data delay
            PcmDoutIsOpenDrain: PCM_DOUT pin configuration
            PcmIsOpenDrain: PCM interface I/O mode
        """
        self.Primitive = Commands.API_PP_AUDIO_INIT_PCM_REQ
        self.PcmEnable = PcmEnable
        self.IsMaster = IsMaster
        self.Reserved = Reserved
        self.PcmFscFreq = PcmFscFreq
        self.PcmFscLength = PcmFscLength
        self.PcmFscStartAligned = PcmFscStartAligned
        self.PcmClk = PcmClk
        self.PcmClkOnRising = PcmClkOnRising
        self.PcmClksPerBit = PcmClksPerBit
        self.PcmFscInvert = PcmFscInvert
        self.PcmCh0Delay = PcmCh0Delay
        self.PcmDoutIsOpenDrain = PcmDoutIsOpenDrain
        self.PcmIsOpenDrain = PcmIsOpenDrain


class ApiPpAudioInitPcmCfm(BaseCommand):
    """
    Confirmation response for PCM audio initialization.
    Contains the status of the initialization request.
    """

    _fields_ = [
        # Controls whether the device is master or slave on the PCM interface.
        ("Status", c_uint8)
    ]

    def __init__(self, status: RsStatusType):
        """
        Initialize PCM initialization confirmation.

        Args:
            status (RsStatusType): Status of the initialization request
        """
        self.Primitive = Commands.API_PP_AUDIO_MUTE_REQ
        self.Status = status


class ApiPpAudioModeType(IntEnum):
    """
    Enumeration of audio output modes.
    Defines different audio routing options and configurations.
    """
    API_AUDIO_MODE_EARPIECE = 0x00  # PP Audio output through the earpiece
    API_AUDIO_MODE_HEADSET = 0x01  # PP Audio output through the earpiece
    API_AUDIO_MODE_HANDSFREE = (
        0x02  # PP Audio output through the Handsfree speakerphone
    )
    API_AUDIO_MODE_PCM0 = 0x03  # PP Audio output through the PCM 0 channel
    API_AUDIO_MODE_I2S_SW_LEFT = (
        0x10  # PP Audio output mode I2S, Subwoofer, left channel
    )
    API_AUDIO_MODE_I2S_SW_RIGHT = (
        0x11  # PP Audio output mode I2S, Subwoofer, right channel
    )
    API_AUDIO_MODE_I2S_SW_MIX = (
        0x12  # PP Audio output mode I2S, Subwoofer, left/right mix
    )
    API_AUDIO_MODE_USB_RX_STEREO = (
        0x13  # PP Audio output mode USB, 48KHz stereo Rx only
    )


class ApiPpAudioOpenReq(BaseCommand):
    """
    Command to open an audio channel.
    Specifies the audio output mode to be used.
    """

    _fields_ = [("Mode", c_uint8)]

    def __init__(self, mode: ApiPpAudioModeType):
        """
        Initialize audio open request.

        Args:
            mode (ApiPpAudioModeType): Audio output mode to use
        """
        self.Primitive = Commands.API_PP_AUDIO_OPEN_REQ
        self.Mode = mode


class ApiPpAudioCloseReq(BaseCommand):
    """
    Command to close the currently open audio channel.
    """

    def __init__(self):
        """Initialize audio close request."""
        self.Primitive = Commands.API_PP_AUDIO_CLOSE_REQ


class ApiPpAudioSetVolumeReq(BaseCommand):
    """
    Command to set audio volume.
    Controls the volume level of the audio output.
    """

    _fields_ = [("Volume", c_uint8)]

    def __init__(self, volume: int):
        """
        Initialize volume setting request.

        Args:
            volume (int): Volume level to set
        """
        self.Primitive = Commands.API_PP_AUDIO_SET_VOLUME_REQ
        self.Volume = volume


class ApiPpAudioMuteRxTxType(IntEnum):
    """
    Enumeration of audio mute options.
    Defines which audio paths can be muted (receive, transmit, or both).
    """
    API_MUTE_RX = 0x01  # Mute audio direction RX (Speaker)
    API_MUTE_TX = 0x02  # Mute audio direction TX (Microphone)
    API_MUTE_BOTH = 0x03  # Mute both audio directions RX and TX (Speaker and Mic)


class ApiPpAudioMuteReq(BaseCommand):
    """
    Command to mute audio paths.
    Allows muting of receive (speaker) and/or transmit (microphone) paths.
    """

    _fields_ = [
        # Controls whether the device is master or slave on the PCM interface.
        ("muteRxTx", c_uint8)
    ]

    def __init__(self, muteRxTx: ApiPpAudioMuteRxTxType):
        """
        Initialize audio mute request.

        Args:
            muteRxTx (ApiPpAudioMuteRxTxType): Which audio paths to mute
        """
        self.Primitive = Commands.API_PP_AUDIO_MUTE_REQ
        self.muteRxTx = muteRxTx


class ApiPpAudioUnmuteReq(BaseCommand):
    """
    Command to unmute audio paths.
    Allows unmuting of previously muted receive and/or transmit paths.
    """

    _fields_ = [
        # Controls whether the device is master or slave on the PCM interface.
        ("muteRxTx", c_uint8)
    ]

    def __init__(self, muteRxTx: ApiPpAudioMuteRxTxType):
        """
        Initialize audio unmute request.

        Args:
            muteRxTx (ApiPpAudioMuteRxTxType): Which audio paths to unmute
        """
        self.Primitive = Commands.API_PP_AUDIO_UNMUTE_REQ
        self.muteRxTx = muteRxTx
